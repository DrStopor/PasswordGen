<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIsAAAD/AAAA/AAAAFYAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAACHAAAA/wAAAP0AAABaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXgAAAP0AAAD/AAAAgwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFoAAAD9AAAA/wAAAIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAA7QAAAP8AAAC0AAAABgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALwAAAOsAAAD/AAAAuAAAAAgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABIAAADOAAAA/wAA
        ANsAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAAAAzAAAAP8AAADeAAAAHwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAACwAAAAsAAAALAAAADQAA
        AKcAAAD/AAAA9AAAAEgAAAAIAAAACwAAAAsAAAALAAAACwAAAAsAAAALAAAACwAAAAwAAACmAAAA/wAA
        APYAAABLAAAABwAAAAsAAAALAAAACwAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEYAAADBAAAAwgAA
        AMIAAADBAAAA4wAAAP8AAAD+AAAA1gAAAMEAAADCAAAAwgAAAMIAAADCAAAAwgAAAMIAAADCAAAAwQAA
        AOIAAAD/AAAA/wAAANgAAADBAAAAwgAAAMIAAAC/AAAAPQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOgAA
        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
        AFoAAABfAAAAOwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA/wAAAP8AAACsAAAABQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFMAAAD7AAAA/wAA
        ANsAAAAdAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALQAA
        AOoAAAD/AAAA9wAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAASAAAAzQAAAP8AAAD/AAAAgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAIAAAClAAAA/wAAAP8AAAC6AAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHwAAAD/AAAA/wAAAOEAAAAjAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+H/D//h/w//4P8H/+D/B/4AAAA+AAAAPgAAAD4AAAAeAAAAH/h/w//4Y
        MP/+CBB//ggQf/4IEH//DBh//wwYf+AAAAHgAAAB8AAAAfAAAAHwgAwB/4MMH/+DBB//wwYf/8MGH//D
        Bh///4P///+D////g////4P///+B////wf8=
</value>
  </data>
</root>